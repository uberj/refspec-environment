# Intro
#------
# What is heat?
#   http://docs.openstack.org/developer/heat/template_guide/hot_guide.html


# Each HOT template has to include the heat_template_version key with value specifying which version
# of heat is being used -- in this case ‘2013-05-23’ (the current version of HOT)
heat_template_version: 2013-05-23

# Parameters are passed into heat via the ``--parameters`` flag [0]. These parameters are later used
# in the heat template and add to the reusability of a template. Ideally, the difference between
# production and dev will be determined by passing different parameter values.
#
# Here is an example of this template being invoked::
#     heat stack-create test --disable-rollback --template-file=dpaste-env.yaml --parameters="
#         key_name=uberj-key;
#         flavor=m1.large;
#         image=ubuntu-trusty.amd64.master.2014072905;
#         public_net_id=7b3170a7-3c5f-465f-8bbf-6dd53a3ac6ae;
#         private_net_id=12fb13e2-0cf9-4656-a6b5-63a216b9c866;
#         private_subnet_id=a4adffc9-f6ca-43e0-92b7-6bcc7bfe9f7d"
#
# The uuid's used for public_net_id, private_net_id, and private_subnet_id are references to
# existing networks and subnets present in OpenStack.
#
# [0] http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#parameters-section
parameters:
  key_name:
    type: string
  flavor:
    type: string
    default: m1.medium
  image:
    type: string
    default: ubuntu-trusty-amd64-0.1.0-2014073016

  # Network parameters. These should all have sane defaults
  public_net_id:
    type: string
    default: public
    description: >
      ID of public network for which floating IP addresses will be allocated
  private_net_name:
    type: string
    default: private
    description: Name of private network to be created
  private_net_cidr:
    type: string
    default: 10.0.0.0/24
    description: Private network address (CIDR notation)
  private_net_gateway:
    type: string
    default: 10.0.0.1
    description: Private network gateway address
  private_net_pool_start:
    type: string
    default: 10.0.0.10
    description: Start of private network IP address allocation pool
  private_net_pool_end:
    type: string
    default: 10.0.0.254
    description: End of private network IP address allocation pool


# "In the resources section, the templates for actual resources that will make up a stack deployed
# from the HOT template (e.g. compute instances, networks, storage volumes) are defined. Each
# resource is defined as a separate block" [1]
#
# [1] http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#resources-section
resources:
  secgroup-ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on SSH.
      rules: [{protocol: tcp, port_range_max: 22, port_range_min: 22},]

  secgroup-web:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable traffic external traffic on SSH.
      rules: [{protocol: tcp, port_range_max: 80, port_range_min: 80},]

  secgroup-internal:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Enable all traffic between instances.
      rules: [{protocol: tcp, port_range_max: 65535, port_range_min: 1, remote_mode: remote_group_id},]

  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }
      dns_nameservers:
        - 8.8.8.8

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  # All stacks are deployed on openstack instances. In this example we define two instance resources:
  # ``db_server`` and ``web_server``. An instance is of type ``OS::Nova::Server``. Later in the
  # template you will see resources that have different types.
  db_server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      networks:
        - port: { get_resource: db_port }

  # For an instance to have network connectivity it must have a port that connects it to a network.
  # Ports are themselves a resource type (i.e. ``OS::Neutron::Port``)
  db_port:
    type: OS::Neutron::Port
    properties:
      #network_id: { get_param: private_net_id }
      network_id: { get_resource: private_net }
      fixed_ips:
        #- subnet_id: { get_param: private_subnet_id }
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        - { get_resource: secgroup-internal }
        - { get_resource: secgroup-web }
        - { get_resource: secgroup-ssh }

  # By default, when you connect an instance to a network it you must assign it a publicly accessible
  # ip address. These external ip addresses are called "floating ip addresses"
  db_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: db_port }

  # SoftwareConfig and SoftwareDeployment resources are the means by which you tie peices of
  # configuration to an instance resource. To make an anology to OOP (Object Oriented Programming) a
  # SoftwareConfig can be thought of as a classs definition and a SoftwareDeployment can be thought
  # of as an instance of that class definition. For a more thorough explanation of of SoftwareConfig
  # and SoftwareDeployment resources see:
  #     https://wiki.openstack.org/wiki/Heat/Blueprints/hot-software-config-spec
  #
  # Here we are defining the SoftwareConfig resource that knows how to install MySQL and a MySQL database.
  # Like templates, SoftwareConfig resources can have parameters (called inputs) that allow a single
  # SoftwareConfig resources to be reused by multiple SoftwareDeploy resources. In this specific
  # example of a SoftwareConfig, the puppetlabs-mysql module is used as the underlying
  # implementation mechanism [0].
  #
  # [0] https://github.com/puppetlabs/puppetlabs-mysql
  mysql_server_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: db_name
      - name: root_password
      - name: username
      - name: password
      - name: host
      outputs:
      - name: result
      config: |
        # TODO, break this out into its own SoftwareConfig
        class { '::mysql::server':
          root_password     => $::root_password,
          restart           => true,
          override_options  => {
            'mysqld' => {
              'bind-address' => '0.0.0.0',
            }
          }
        }

        ::mysql::db { $::db_name:
          user     => $::username,
          password => $::password,
          host     => $::host,
          # TODO, figure out how to pass this as a param. Unicode formating is breaking things.
          # The list looks like [u'SELECT', u'UPDATE', ...] and puppet doesn't like that.
          grant    => ['ALL']
        }

  # In the following SoftwareDeployment we are applying the SoftwareConfig resource
  # (mysql_server_config) to the db_server resource we previously defined.
  #
  # The data fed into the SoftwareConfig inputs are collected by the get_attr intrinsic function:
  #
  #     "The get_attr function allows referencing an attribute of a resource. At runtime, it will be
  #     resolved to the value of an attribute of a resource instance created from the respective
  #     resource definition of the template" 
  #         -- http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#get-attr
  #
  # Later in this example template we define a SoftwareConfig 'app_config'.  The instantiation of
  # the 'app_config' as a SoftwareDeployment (a.k.a the 'app_config_deployment' resource) is then
  # used as a source of data to feed into the mysql_server_deployment below. For example::
  #
  #   input_values:
  #     db_name:
  #       get_attr: [app_config_deployment, db_name]
  #
  # This is setting the input_value ``db_name`` to the output value ``db_name`` of the
  # SoftwareDeployment resource ``app_config_deployment``.
  #
  # The following snippet is where the mysql_server_deployment SoftwareDeployment is directly tied
  # to the 'db_server' instance resource.
  #
  #   server:
  #     get_resource: db_server
  #
  mysql_server_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mysql_server_config
      server:
        get_resource: db_server
      input_values:
        db_name:
          get_attr: [app_config_deployment, db_name]
        root_password:
          get_attr: [app_config_deployment, db_root_password]
        username:
          get_attr: [app_config_deployment, db_username]
        password:
          get_attr: [app_config_deployment, db_password]
        host:
          get_attr: [app_config_deployment, db_allowed_hosts]


  # The following resources are configuring and deploying an apache web server instance in a similar
  # manor to how the MySQL server was installed above.

  # The web server instance
  web_server:
    type: OS::Nova::Server
    properties:
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      user_data_format: SOFTWARE_CONFIG
      networks:
        - port: { get_resource: web_port }

  # Create a port fot the instance
  web_port:
    type: OS::Neutron::Port
    properties:
      #network_id: { get_param: private_net_id }
      network_id: { get_resource: private_net }
      fixed_ips:
        #- subnet_id: { get_param: private_subnet_id }
        - subnet_id: { get_resource: private_subnet }
      security_groups:
        - { get_resource: secgroup-internal }
        - { get_resource: secgroup-web }
        - { get_resource: secgroup-ssh }

  # Give the instance external connectivity
  web_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: web_port }

  # Define how apache should be installed and configured. This uses the puppetlabs-apache puppet
  # module [0].
  #
  # [0] https://github.com/puppetlabs/puppetlabs-apache
  apache_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      inputs:
      - name: vhost_name
      - name: install_root
      - name: wsgi_path
      - name: static_root
      outputs:
      - name: result
      config: |
        class {
          'apache':
            default_mods        => true,
            default_confd_files => false;
          'apache::mod::wsgi':
            wsgi_socket_prefix => '/var/run/wsgi';
        }

        apache::vhost { "$::vhost_name":
          port                        => '80',
          default_vhost               => true,
          aliases                     => [
            # TODO, what do do about this? What if an app doesn't need this?
            {alias => '/static', path => $::static_root}
          ],
          docroot                     => "$::install_root",
          wsgi_application_group      => '%{GLOBAL}',
          wsgi_daemon_process         => 'wsgi',
          wsgi_daemon_process_options => {
            processes    => '2',
            threads      => '15',
            display-name => '%{GROUP}',
          },
          wsgi_import_script          => "$::wsgi_path",
          wsgi_import_script_options  =>
            { process-group => 'wsgi', application-group => '%{GLOBAL}' },
          wsgi_process_group          => 'wsgi',
          wsgi_script_aliases         => { '/' => "$::wsgi_path" },
        }


  # Deploy the apache configuration onto the web_server instance resource
  apache_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: apache_config
      server:
        get_resource: web_server
      input_values:
        vhost_name:
          get_attr: [app_config_deployment, apache_vhost_name]
        install_root:
          get_attr: [app_config_deployment, apache_install_root]
        wsgi_path:
          get_attr: [app_config_deployment, apache_wsgi_path]
        static_root:
          get_attr: [app_config_deployment, apache_static_root]

  # A SoftwareConfig for installing mysql client bindings
  mysql_client_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: puppet
      outputs:
      - name: result
      config: |
        include mysql::client
        class { 'mysql::bindings':
          python_enable => true
        }

  # Installing (or deploying) the mysql_client_config onto the defined web_server instance resource.
  mysql_client_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: mysql_client_config
      server:
        get_resource: web_server

  # Define the app config
  #
  # Now that we have defined out apache and mysql servers we are ready to configure our application.
  # In this example we are collecting things together in a manual way, this process is under active
  # development and will require less verbosity in the future. These configuration facts will likely
  # be stored in zookeper and fronted by hiera.
  #
  # You will recall that we previously mentioned db_name from the app_config_demployment resource.
  # The following snippet is defining that output::
  #
  #   outputs:
  #     - name: db_name
  #
  # The install action of this SoftwareConfig is to place all application configuration data in an
  # /etc/environments file so that applications and services have access. To get the file onto a an
  # instance, simply deploy this SoftwareConfig onto the server.
  app_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        # db specific data
        - name: db_name
        - name: db_root_password
        - name: db_username
        - name: db_password
        - name: db_allowed_hosts

        # apache specific data
        - name: apache_vhost_name
        - name: apache_install_root
        - name: apache_wsgi_path
        - name: apache_static_root

        # app installation data
        - name: app_install_dir
        - name: app_git_url
        - name: app_install_script
        - name: app_db_server
        - name: app_secret_key
      outputs:
        # db specific data
        - name: db_name
        - name: db_root_password
        - name: db_username
        - name: db_password
        - name: db_allowed_hosts

        # apache specific data
        - name: apache_vhost_name
        - name: apache_install_root
        - name: apache_wsgi_path
        - name: apache_static_root

        # app installation data
        - name: app_install_dir
        - name: app_git_url
        - name: app_install_script
        - name: app_db_server
        - name: app_secret_key
      config: |
        #!/bin/bash
        set -x
        function stash_config () {
          # TODO Put this stuff in zookeeper and query with hiera in puppet?
          # many ways to do this
          val=${!1}
          echo -n $val > ${heat_outputs_path}.$1
          echo "export PROVISION_$1=$val" >> /etc/environment
        }

        stash_config db_name
        stash_config db_root_password
        stash_config db_username
        stash_config db_password
        stash_config db_allowed_hosts

        stash_config apache_vhost_name
        stash_config apache_install_root
        stash_config apache_wsgi_path
        stash_config apache_static_root

        stash_config app_install_dir
        stash_config app_git_url
        stash_config app_install_script
        stash_config app_db_server
        stash_config app_secret_key

  # Deploy and place application specific data onto the apache/app webserver
  app_config_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_config
      server:
        # Install the app config on the web server
        get_resource: web_server
      input_values:
        # TODO Figure out a way to generate random passwords
        db_root_password: asillypassword
        db_name: dpaste
        db_username: dpaste
        db_password: anothersillypassword
        db_allowed_hosts: 10.0.0.%

        apache_vhost_name: dpaste
        apache_install_root: /var/www/dpaste
        apache_wsgi_path: /var/www/dpaste/wsgi.py
        apache_static_root: /var/www/dpaste/dpaste/static/

        app_install_dir: /var/www/dpaste
        app_git_url: https://github.com/uberj/dpaste.git
        app_install_script: install.sh
        app_db_server:
          # Get the internal address of the db
          get_attr: [db_server, first_address]
        app_secret_key: a-not-so-secret-key

  # Much like apache and mysql need to be configured and installed, so too does the application we
  # are deploying. This SoftwareConfig relies on the app itself having an app_install_script (in
  # this case ``install.sh``) in its application code that knows how to install the application
  # itself.
  app_install:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: install_dir
      - name: git_url
      - name: install_script
      outputs:
      - name: result
      config: |
        #!/bin/bash
        mkdir -p $(dirname $install_dir)
        git clone $git_url $install_dir
        $install_dir/$install_script


  # Install the application on the web_server
  app_install_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: app_install
      server:
        get_resource: web_server
      input_values:
        install_dir:
          get_attr: [app_config_deployment, app_install_dir]
        git_url:
          get_attr: [app_config_deployment, app_git_url]
        install_script:
          get_attr: [app_config_deployment, app_install_script]

# "In the outputs section, any output parameters that should be available to the user can be defined.
# Typically, this would be, for example, parameters such as IP addresses of deployed instances, or
# URLs of web applications deployed as part of a stack."
#   -- http://docs.openstack.org/developer/heat/template_guide/hot_spec.html#outputs-section
#
# All outputs can be viewed either by the Horizon UI or from the heat cli tools, both which are
# derived from the heat API.
outputs:
  result:
    value:
      get_attr: [mysql_server_deployment, result]
  # DB output
  db_stdout:
    value:
      get_attr: [mysql_server_deployment, deploy_stdout]
  db_stderr:
    value:
      get_attr: [mysql_server_deployment, deploy_stderr]
  db_status_code:
    value:
      get_attr: [mysql_server_deployment, deploy_status_code]

  # Web output
  web_stdout:
    value:
      get_attr: [apache_deployment, deploy_stdout]
  web_stderr:
    value:
      get_attr: [apache_deployment, deploy_stderr]
  web_status_code:
    value:
      get_attr: [apache_deployment, deploy_status_code]

  # Application output
  app_stdout:
    value:
      get_attr: [app_install_deployment, deploy_stdout]
  app_stderr:
    value:
      get_attr: [app_install_deployment, deploy_stderr]

  # MySQL client output
  mysql_client_app_stdout:
    value:
      get_attr: [mysql_client_deployment, deploy_stdout]
  mysql_client_app_stderr:
    value:
      get_attr: [mysql_client_deployment, deploy_stderr]

  web_public_ip:
    description: Floating IP address of database in public network
    value: { get_attr: [ db_floating_ip, floating_ip_address ] }

  # The IP address to point your browser at
  web_public_ip:
    description: Floating IP address of webserver in public network
    value: { get_attr: [ web_floating_ip, floating_ip_address ] }
